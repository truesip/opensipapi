#
# OpenSIPS configuration for Enterprise Voice API with PSTN support
#

####### Global Parameters #########

log_level=3
log_stderror=no
log_facility=LOG_LOCAL0
children=4
auto_aliases=no

# Listen interfaces
listen=udp:0.0.0.0:5060
listen=tcp:0.0.0.0:5060

# Gateway configuration
# Replace these with your actual SIP provider settings
define PSTN_GATEWAY "your-sip-provider.com:5060"
define PSTN_USERNAME "your_username"
define PSTN_PASSWORD "your_password"

####### Modules Section ########

mpath="/usr/lib/x86_64-linux-gnu/opensips/modules/"

# Core modules
loadmodule "signaling.so"
loadmodule "sl.so"
loadmodule "tm.so"
loadmodule "rr.so"
loadmodule "maxfwd.so"
loadmodule "sipmsgops.so"
loadmodule "uri.so"

# Authentication and registration
loadmodule "auth.so"
loadmodule "auth_db.so"
loadmodule "usrloc.so"
loadmodule "registrar.so"

# Accounting
loadmodule "acc.so"

# Management interface
loadmodule "mi_fifo.so"
modparam("mi_fifo", "fifo_name", "/tmp/opensips_fifo")
modparam("mi_fifo", "fifo_mode", 0666)

# UAC module for outbound calls
loadmodule "uac.so"
loadmodule "uac_auth.so"

# Dialog module for call tracking
loadmodule "dialog.so"
modparam("dialog", "dlg_match_mode", 1)
modparam("dialog", "default_timeout", 21600)

# Media relay
loadmodule "rtpproxy.so"
modparam("rtpproxy", "rtpproxy_sock", "udp:localhost:7722")

####### Routing Logic ########

route {
    if (!mf_process_maxfwd_header("10")) {
        sl_send_reply("483", "Too Many Hops");
        exit;
    }

    if (has_totag()) {
        if (loose_route()) {
            if (is_method("BYE")) {
                setflag(1); # ACC_DO
            }
            route(RELAY);
        } else {
            if (is_method("ACK")) {
                if (t_check_trans()) {
                    route(RELAY);
                } else {
                    exit;
                }
            }
            sl_send_reply("404", "Not here");
        }
        exit;
    }

    if (is_method("CANCEL")) {
        if (t_check_trans()) {
            route(RELAY);
        }
        exit;
    }

    t_check_trans();

    # Handle INVITE requests
    if (is_method("INVITE")) {
        # Create dialog for call tracking
        create_dialog();
        
        # Check if this is an outbound call to PSTN
        if ($rU =~ "^[0-9]+$" && $(rU{s.len}) >= 7) {
            route(PSTN_OUT);
            exit;
        }
        
        # Local call handling
        if (!lookup("location")) {
            sl_send_reply("404", "User Not Found");
            exit;
        }
    }

    # Handle REGISTER
    if (is_method("REGISTER")) {
        if (!save("location")) {
            sl_reply_error();
        }
        exit;
    }

    route(RELAY);
}

route[PSTN_OUT] {
    xlog("L_INFO", "Routing call to PSTN number: $rU");
    
    # Set destination to PSTN gateway
    $du = "sip:" + PSTN_GATEWAY;
    
    # Add authentication if required
    uac_auth();
    
    # Enable RTP proxy for media handling
    rtpproxy_offer();
    
    # Add accounting
    setflag(1); # ACC_DO
    
    # Route the call
    route(RELAY);
}

route[RELAY] {
    if (is_method("INVITE")) {
        if (isflagset(1)) {
            acc_log_request("call started");
        }
        
        # Handle RTP proxy for media
        if (has_body("application/sdp")) {
            rtpproxy_offer();
        }
    }

    if (!t_relay()) {
        sl_reply_error();
    }
    exit;
}

onreply_route {
    if (status =~ "18[0-9]|2[0-9][0-9]") {
        if (has_body("application/sdp")) {
            rtpproxy_answer();
        }
    }
}

failure_route {
    if (t_was_cancelled()) {
        exit;
    }
    
    # Handle call failures
    if (status =~ "486|408|487") {
        xlog("L_INFO", "Call failed with status: $rs");
    }
}
